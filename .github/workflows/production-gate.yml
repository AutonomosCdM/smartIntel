name: Production Deployment Gate

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  pre-flight:
    name: Pre-Flight Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run full test suite
        run: |
          pytest tests/ -v \
            --cov=src \
            --cov-report=term-missing \
            --cov-fail-under=80

      - name: Run security audit
        run: |
          pip install pip-audit
          pip-audit

      - name: Verify version consistency
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_CLEAN="${VERSION#v}"
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)

          if [ "$VERSION_CLEAN" != "$PYPROJECT_VERSION" ]; then
            echo "Version mismatch: tag=$VERSION_CLEAN, pyproject.toml=$PYPROJECT_VERSION"
            exit 1
          fi
          echo "Version verified: $VERSION_CLEAN"

  approval:
    name: Manual Approval Required
    runs-on: ubuntu-latest
    needs: pre-flight
    environment:
      name: production-approval
    steps:
      - name: Request approval
        run: |
          echo "⚠️  Manual approval required for production deployment"
          echo "Version: ${{ needs.pre-flight.outputs.version }}"
          echo "Reviewer: Please verify all checks passed before approving"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-flight, approval]
    environment:
      name: production
      url: https://procuregenius.autonomoslab.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-flight.outputs.version }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Build production package
        run: python -m build

      - name: Configure production credentials
        env:
          WATSONX_API_KEY: ${{ secrets.WATSONX_API_KEY_PRODUCTION }}
          WATSONX_PROJECT_ID: ${{ secrets.WATSONX_PROJECT_ID_PRODUCTION }}
        run: |
          mkdir -p config
          echo "WATSONX_API_KEY=$WATSONX_API_KEY" > config/.env.production
          echo "WATSONX_PROJECT_ID=$WATSONX_PROJECT_ID" >> config/.env.production
          echo "ENV=production" >> config/.env.production

      - name: Deploy to production
        run: |
          python scripts/deploy-production.py
        env:
          ENVIRONMENT: production
          VERSION: ${{ needs.pre-flight.outputs.version }}
          WATSONX_API_KEY: ${{ secrets.WATSONX_API_KEY_PRODUCTION }}
          WATSONX_PROJECT_ID: ${{ secrets.WATSONX_PROJECT_ID_PRODUCTION }}

      - name: Smoke test production
        run: |
          pytest tests/integration/test_smoke.py -v
        env:
          WATSONX_API_KEY: ${{ secrets.WATSONX_API_KEY_PRODUCTION }}
          WATSONX_PROJECT_ID: ${{ secrets.WATSONX_PROJECT_ID_PRODUCTION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.pre-flight.outputs.version }}
          name: Release ${{ needs.pre-flight.outputs.version }}
          draft: false
          prerelease: false
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Production deployment successful: ${{ needs.pre-flight.outputs.version }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment summary
        if: success()
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.pre-flight.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: production" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Access production: https://procuregenius.autonomoslab.com" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback (if needed)
    runs-on: ubuntu-latest
    needs: [pre-flight, deploy-production]
    if: failure()
    steps:
      - name: Notify rollback
        run: |
          echo "🔴 Production deployment failed - manual rollback required"
          echo "Version: ${{ needs.pre-flight.outputs.version }}"
          echo "Contact DevOps team immediately"

      - name: Send alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '🔴 URGENT: Production deployment failed - rollback required'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
